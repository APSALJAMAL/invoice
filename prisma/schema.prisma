generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OWNER
}


model User {
  id            String          @id @default(cuid())
  name     String?

  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  details       Details? 
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())

  Invoice Invoice[]
}

 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt @default(now())

}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model Invoice {
  id String @id @default(uuid())

  invoiceName   String
  total         Float
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  clientName    String
  clientEmail   String
  clientAddress String
  currency      String
  invoiceNumber Int
  note          String?
  verify        String?

  items InvoiceItem[]  // One-to-many relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model InvoiceItem {
  id          String   @id @default(uuid())
  description String
  quantity    Int
  rate        Int

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum InvoiceStatus {
  PAID
  PENDING
}

model Details {
  id              String   @id @default(cuid())
  key             String
  secret          String
  verified        Boolean  @default(false)
  organizationId  String
  organizationName  String
  organizationAddress  String
  gstNumber String

  userId          String   @unique // One-to-one: each user has at most one Details
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())
}
